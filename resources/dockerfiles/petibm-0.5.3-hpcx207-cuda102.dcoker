# vim:ft=dockerfile
# Packages:
#   - CUDA 10.2
#   - HPCX 2.7.4
#   - AmgX 6f1401
#   - PETSc 3.16.6
#   - AmgXWrapper dd1bbc
#   - PetIBM 0.5.3


# use ARGs as a hack for global variables
ARG HPCX_VERSION="2.11"
ARG AMGX_VERSION="6f14016e420617b4d57580f77b5a2ab4c28a162d"
ARG PETSC_VERSION="3.16.6"
ARG AMGXWRAPPER_VERSION="dd1bbc3c6ecf5f217600569f790df02690fa3667"
ARG PETIBM_VERSION="0.5.3"

# Multi-stage build stage 0: build
# =================================
FROM nvidia/cuda:10.2-devel-ubuntu18.04 AS builder

# re-include the global variables into this stage
ARG HPCX_VERSION
ARG AMGX_VERSION
ARG PETSC_VERSION
ARG AMGXWRAPPER_VERSION
ARG PETIBM_VERSION

# configure the environment
RUN export DEBIAN_FRONTEND=noninteractive \
 && ln -sf /bin/bash /bin/sh \
 && apt-get -y update \
 && apt-get -y install tzdata locales \
 && ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime \
 && dpkg-reconfigure --frontend noninteractive tzdata \
 && sed -i "s/\#\ en_US\.UTF-8\ UTF-8/en_US\.UTF-8\ UTF-8/g" /etc/locale.gen \
 && dpkg-reconfigure locales \
 && echo 'LANG="en_US.UTF-8"' >> /etc/default/locale \
 && echo 'LANG="en_US.UTF-8"' >> /etc/locale.conf

# install required packages
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
        curl build-essential libtool autoconf automake pkg-config \
        numactl libnuma-dev \
        python3 python3-pip wget rsync zlib1g-dev

# download/copy required files and install cmake
RUN curl -L https://content.mellanox.com/hpc/hpc-x/v2.7.4/hpcx-v2.7.4-gcc-inbox-ubuntu18.04-x86_64.tbz -o /hpcx.tbz \
 && curl -L https://github.com/NVIDIA/AMGX/tarball/${AMGX_VERSION} -o /amgx.tar.gz \
 && curl -L http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-${PETSC_VERSION}.tar.gz -o /petsc.tar.gz \
 && curl -L https://github.com/barbagroup/AmgXWrapper/tarball/${AMGXWRAPPER_VERSION} -o /amgxwrapper.tar.gz \
 && curl -L https://github.com/barbagroup/PetIBM/tarball/v${PETIBM_VERSION} -o /petibm.tar.gz \
 && curl -L https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh -o /cmake-installer.sh \
 && sh /cmake-installer.sh --prefix=/usr --exclude-subdir --skip-license

# installation paths
ENV AMGX_DIR="/usr/local/amgx-${AMGX_VERSION}" \
    PETSC_DIR="/usr/local/petsc-${PETSC_VERSION}" \
    PETSC_ARCH="" \
    AMGXWRAPPER_DIR="/usr/local/amgxwrapper-${AMGXWRAPPER_VERSION}" \
    PETIBM_DIR="/usr/local/petibm-${PETIBM_VERSION}"

# install HPCX
RUN mkdir /hpcx \
 && tar -xf /hpcx.tbz -C /hpcx --strip-component=1 \
 && rm /hpcx.tbz

# build and install amgx
RUN source /hpcx/hpcx-init.sh && hpcx_load \
 && mkdir amgx && tar -xf /amgx.tar.gz -C amgx --strip-component=1 \
 && mkdir amgx/build && cd amgx/build \
 && cmake \
    -DCMAKE_C_COMPILER=gcc \
    -DCMAKE_CXX_COMPILER=g++ \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${AMGX_DIR} \
    -DCMAKE_VERBOSE_MAKEFILE=OFF  \
    -DCUDA_ARCH="35;70" \
    -DCMAKE_NO_MPI=OFF \
    -DAMGX_NO_RPATH=OFF  \
    -DCUDA_NVCC_FLAGS_RELEASE="" \
    .. \
 && make -j $(nproc) all && make install \
 && cd ../.. && rm -rf amgx amgx.tar.gz \
 && echo "${AMGX_DIR}/lib" > /etc/ld.so.conf.d/amgx-${AMGX_VERSION}.conf && ldconfig

# build and install PETSc
RUN source /hpcx/hpcx-init.sh && hpcx_load \
 && export PETSC_INSTALL_PATH=${PETSC_DIR} && unset PETSC_ARCH && unset PETSC_DIR \
 && mkdir petsc && tar -xf petsc.tar.gz -C petsc --strip-component=1 && cd petsc \
 && ./configure \
    --prefix="${PETSC_INSTALL_PATH}" \
    --with-default-arch=0 \
    --with-fortran-bindings=0 \
    --with-precision=double \
    --with-clanguage=C \
    --with-shared-libraries=1 \
    --with-cc=mpicc \
    --with-cxx=mpicxx \
    --with-fc=0 \
    --with-pic=1 \
    --with-cxx-dialect=C++11 \
    --with-debugging=0 \
    --COPTFLAGS="-O3" \
    --CXXOPTFLAGS="-O3" \
    --with-gcov=0 \
    --with-mpi=1 \
    --download-f2cblaslapack=1 \
    --download-hypre=1 \
    --download-superlu_dist=1 \
    --download-hdf5=1 \
 && make PETSC_DIR=${PWD} PETSC_ARCH=arch-linux-c-opt all \
 && make PETSC_DIR=${PWD} PETSC_ARCH=arch-linux-c-opt install \
 && cd .. && rm -rf petsc petsc.tar.gz \
 && export PETSC_DIR=${PETSC_INSTALL_PATH} \
 && echo "${PETSC_DIR}/lib" > /etc/ld.so.conf.d/petsc-${PETSC_VERSION}.conf && ldconfig

# build and install AmgXWrapper
RUN source /hpcx/hpcx-init.sh && hpcx_load \
 && export OMPI_MCA_plm_rsh_agent=sh \
 && mkdir amgxwrapper && tar -xf amgxwrapper.tar.gz -C amgxwrapper --strip-component=1 \
 && cd amgxwrapper && mkdir build && cd build \
 && export CC=mpicc && export CXX=mpicxx \
 && cmake -DCUDA_DIR=/usr/local/cuda -DCMAKE_INSTALL_PREFIX=${AMGXWRAPPER_DIR} .. \
 && make all -j $(nproc) && make install \
 && cd .. && mkdir build_poisson && cd build_poisson \
 && cmake -DCUDA_DIR=/usr/local/cuda ../example/poisson && make all -j \
 && mkdir ${AMGXWRAPPER_DIR}/bin && cp bin/poisson ${AMGXWRAPPER_DIR}/bin \
 && cp -r configs ${AMGXWRAPPER_DIR} \
 && cd .. && mkdir build_solveFromFiles && cd build_solveFromFiles \
 && cmake -DCUDA_DIR=/usr/local/cuda ../example/solveFromFiles && make all -j \
 && cp bin/solveFromFiles ${AMGXWRAPPER_DIR}/bin \
 && cd ../.. && rm -rf amgxwrapper amgxwrapper.tar.gz \
 && echo "${AMGXWRAPPER_DIR}/lib64" > /etc/ld.so.conf.d/amgxwrapper-${AMGXWRAPPER_VERSION}.conf && ldconfig

# build and install PetIBM
RUN source /hpcx/hpcx-init.sh && hpcx_load \
 && export OMPI_MCA_plm_rsh_agent=sh \
 && mkdir petibm && tar xf petibm.tar.gz -C petibm --strip-component=1 \
 && cd petibm \
 && sed -i "s/make\ all/make\ all\ -j/g" configure \
 && mkdir build && cd build \
 && ../configure \
    CXX=mpicxx \
    CXXFLAGS="-O2 -std=c++14" \
    --prefix=${PETIBM_DIR} \
    --with-petsc-dir=${PETSC_DIR} \
    --with-petsc-arch=${PETSC_ARCH} \
    --with-cuda-dir=/usr/local/cuda \
    --with-amgx-dir=${AMGX_DIR} \
    --with-amgxwrapper-dir=${AMGXWRAPPER_DIR} \
    --enable-yamlcpp \
    --enable-gtest \
 && make all -j $(nproc) && make check && make install \
 && cd ../.. && rm -rf petibm petibm.tar.gz \
 && echo "${PETIBM_DIR}/lib" > /etc/ld.so.conf.d/petibm-${PETIBM_VERSION}.conf && ldconfig

# clean
RUN apt -y autoclean \
 && rm /cmake-installer.sh \
 && rm -rf /var/lib/apt/lists/*

# create a scrip to initialize HPCX all the time
RUN echo "#!/bin/bash" > /entrypoint.sh \
 && echo "set -e" >> /entrypoint.sh \
 && echo ". /hpcx/hpcx-init.sh" >> /entrypoint.sh \
 && echo "hpcx_load" >> /entrypoint.sh \
 && echo "exec \"\$@\"" >> /entrypoint.sh \
 && chmod a+x /entrypoint.sh


# Multi-stage build stage 1: runtime image
# =========================================
FROM nvidia/cuda:10.2-runtime-ubuntu18.04 AS production
LABEL maintainer="Pi-Yueh Chuang <pychuang@gwu.edu>"

# re-include the global variables into this stage
ARG HPCX_VERSION
ARG AMGX_VERSION
ARG PETSC_VERSION
ARG AMGXWRAPPER_VERSION
ARG PETIBM_VERSION

# installation paths
ENV AMGX_DIR="/usr/local/amgx-${AMGX_VERSION}" \
    PETSC_DIR="/usr/local/petsc-${PETSC_VERSION}" \
    PETSC_ARCH="" \
    AMGXWRAPPER_DIR="/usr/local/amgxwrapper-${AMGXWRAPPER_VERSION}" \
    PETIBM_DIR="/usr/local/petibm-${PETIBM_VERSION}"

# add paths
ENV PATH="${AMGX_DIR}/bin:${PATH}"
ENV PATH="${PETSC_DIR}/bin:${PATH}"
ENV PATH="${AMGXWRAPPER_DIR}/bin:${PATH}"
ENV PATH="${PETIBM_DIR}/bin:${PATH}"

# configure the environment
RUN export DEBIAN_FRONTEND=noninteractive \
 && ln -sf /bin/bash /bin/sh \
 && apt-get -y update \
 && apt-get -y install tzdata locales \
 && ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime \
 && dpkg-reconfigure --frontend noninteractive tzdata \
 && sed -i "s/\#\ en_US\.UTF-8\ UTF-8/en_US\.UTF-8\ UTF-8/g" /etc/locale.gen \
 && dpkg-reconfigure locales \
 && echo 'LANG="en_US.UTF-8"' >> /etc/default/locale \
 && echo 'LANG="en_US.UTF-8"' >> /etc/locale.conf \
 && apt-get install -y --no-install-recommends \
        python3 python3-pip numactl libnuma-dev zlib1g-dev \
        openssh-client openssh-server

# copy installed programs
COPY --from=builder /hpcx /hpcx
COPY --from=builder ${AMGX_DIR} ${AMGX_DIR}
COPY --from=builder ${PETSC_DIR} ${PETSC_DIR}
COPY --from=builder ${AMGXWRAPPER_DIR} ${AMGXWRAPPER_DIR}
COPY --from=builder ${PETIBM_DIR} ${PETIBM_DIR}
COPY --from=builder /entrypoint.sh /entrypoint.sh

# ldconfig
RUN source /hpcx/hpcx-init.sh && hpcx_load \
 && echo "${AMGX_DIR}/lib" > /etc/ld.so.conf.d/amgx-${AMGX_VERSION}.conf \
 && echo "${PETSC_DIR}/lib" > /etc/ld.so.conf.d/petsc-${PETSC_VERSION}.conf \
 && echo "${AMGXWRAPPER_DIR}/lib64" > /etc/ld.so.conf.d/amgxwrapper-${AMGXWRAPPER_VERSION}.conf \
 && echo "${PETIBM_DIR}/lib64" > /etc/ld.so.conf.d/petibm-${PETIBM_VERSION}.conf \
 && ldconfig

# set up ssh for root for MPI applications
RUN mkdir /var/run/sshd \
 && ssh-keygen -A \
 && sed -i "s/#PermitRootLogin\ yes/PermitRootLogin\ yes/" /etc/ssh/sshd_config \
 && sed -i "s/session\s*required\s*pam_loginuid.so/session\ optional\ pam_loginuid.so/g" /etc/pam.d/sshd \
 && ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' \
 && echo "Host 10.*" > /root/.ssh/config \
 && echo "  Port 23" >> /root/.ssh/config \
 && echo "  StrictHostKeyChecking no" >> /root/.ssh/config \
 && echo "  UserKnownHostsFile /dev/null" >> /root/.ssh/config \
 && chmod 600 /root/.ssh/config && chmod 700 /root/.ssh \
 && cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys

# clean
RUN apt-get -y autoclean \
 && rm -rf /var/lib/apt/lists/*

# using port 23 for Azure cloud, see
# https://batch-shipyard.readthedocs.io/en/3.0.1/80-batch-shipyard-multi-instance-tasks
EXPOSE 23
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/usr/sbin/sshd", "-D", "-p", "23"]
